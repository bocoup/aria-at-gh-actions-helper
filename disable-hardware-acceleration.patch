diff --git a/src/runner/browser-driver/create-web-driver.js b/src/runner/browser-driver/create-web-driver.js
index e9ab531..ae63922 100644
--- a/src/runner/browser-driver/create-web-driver.js
+++ b/src/runner/browser-driver/create-web-driver.js
@@ -1,9 +1,30 @@
 import { Builder } from 'selenium-webdriver';
 import { until, By } from 'selenium-webdriver';
+import chrome from 'selenium-webdriver/chrome.js';
+import * as path from 'node:path';
+
+const chromeLog = path.join(process.cwd(), 'chrome.log')
 
 /** @returns {Promise<AriaATCIRunner.BrowserDriver>} */
 export default async (browser, serverUrl) => {
-  const driver = await new Builder().forBrowser(browser).usingServer(serverUrl).build();
+  const driver = await new Builder()
+    // A completely black browser screen is a commonly-reported symptom of an
+    // issue with hardware acceleration.
+    //
+    // source: https://www.reddit.com/r/browsers/comments/195blkf/hardware_acceleration_enabled_means_constant/?chainedPosts=t3_c53u52
+    // source: https://www.reddit.com/r/chrome/comments/c53u52/chrome_window_turns_completely_black/
+    //
+    // > --disable-gpu
+    // > Disables GPU hardware acceleration. If software renderer is not in
+    // > place, then the GPU process won't launch.
+    //
+    // Source: https://peter.sh/experiments/chromium-command-line-switches/
+    //
+    // https://www.selenium.dev/selenium/docs/api/javascript/module-selenium-webdriver_chrome.html
+    // https://www.selenium.dev/selenium/docs/api/javascript/module-selenium-webdriver_chrome-Options.html
+    .setChromeOptions(new chrome.Options().addArguments(['--disable-gpu', `--log-file=${chromeLog}`]))
+    .forBrowser(browser)
+    .usingServer(serverUrl).build();
 
   return {
     async navigate(url) {
diff --git a/src/runner/driver-test-runner.js b/src/runner/driver-test-runner.js
index 59228da..211d0b9 100644
--- a/src/runner/driver-test-runner.js
+++ b/src/runner/driver-test-runner.js
@@ -97,6 +97,9 @@ export class DriverTestRunner {
     const { atName } = await this.collectedCapabilities;
     // break up the space-separated settings into an array so we can iterate over it
     const settingsArray = settings.split(' ');
+    this.log(RunnerMessage.AT_DRIVER_COMMS, { direction: 'close', message: 'pausing' } });
+    await new Promise((resolve) => setTimeout(resolve, 1000));
+    this.log(RunnerMessage.AT_DRIVER_COMMS, { direction: 'close', message: 'done pausing' } });
 
     if (atName == 'NVDA') {
       // disable the "beeps" when switching focus/browse mode, forces it to speak the mode after switching
