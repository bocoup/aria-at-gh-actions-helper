# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: nvda-test-debug-seek-slider
on: [push]
env:
  ARIA_AT_WORK_DIR: 'tests/alert'
  ARIA_AT_TEST_PATTERN: '{reference/**,test-*-nvda.*}'
  ARIA_AT_CALLBACK_URL: http://example.com
  ARIA_AT_STATUS_URL: http://example.com
  ARIA_AT_CALLBACK_HEADER: 'x-header-param:empty'
  BROWSER: chrome
  NVDA_VERSION: '2023.3'
  RUNNER_DEBUG: true

jobs:
  nvda-test:
    runs-on: windows-2022
    steps:
      - uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: latest

      - name: Start Chrome
        shell: powershell
        run: |
          Start-Sleep -Seconds 60
          for ($trial = 1; $trial -le 10; $trial++) {
          mkdir chrome-profile
          $chrome = Start-Process "C:\Program Files\Google\Chrome\Application\chrome.exe" -ArgumentList "--user-data-dir=./chrome-profile --no-first-run https://example.com" -PassThru
          
          Add-Type -AssemblyName System.Windows.Forms,System.Drawing
          $screens = [Windows.Forms.Screen]::AllScreens
          $top    = ($screens.Bounds.Top    | Measure-Object -Minimum).Minimum
          $left   = ($screens.Bounds.Left   | Measure-Object -Minimum).Minimum
          $width  = ($screens.Bounds.Right  | Measure-Object -Maximum).Maximum
          $height = ($screens.Bounds.Bottom | Measure-Object -Maximum).Maximum
          $bounds   = [Drawing.Rectangle]::FromLTRB($left, $top, $width, $height)
          $bmp      = New-Object System.Drawing.Bitmap ([int]$bounds.width), ([int]$bounds.height)
          $graphics = [Drawing.Graphics]::FromImage($bmp)
          
          $graphics.CopyFromScreen($bounds.Location, [Drawing.Point]::Empty, $bounds.size)
          $bmp.Save("$pwd\screenshot-$trial-1.png")
          
          Start-Sleep -Seconds 5
          
          $graphics.CopyFromScreen($bounds.Location, [Drawing.Point]::Empty, $bounds.size)
          $bmp.Save("$pwd\screenshot-$trial-2.png")
          
          $notepad = Start-Process notepad -PassThru
          
          Start-Sleep -Seconds 5
          
          $graphics.CopyFromScreen($bounds.Location, [Drawing.Point]::Empty, $bounds.size)
          $bmp.Save("$pwd\screenshot-$trial-3.png")
          
          $notepad.Kill()
          $chrome.Kill()
          rm -r chrome-profile
          }

      - name: upload screenshots
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: |
            D:\a\aria-at-gh-actions-helper\aria-at-gh-actions-helper\*.png
